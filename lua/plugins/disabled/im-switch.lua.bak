-- 自动切换输入法

function execute_and_log(command)
  local log_file = "ok.txt"
  -- 执行系统命令并将输出存储到日志文件
  local handle = io.popen(command)
  local result = handle:read("*a")
  handle:close()

  -- 打开日志文件以追加内容
  local log = io.open(log_file, "a")

  -- 将命令的输出写入日志文件
  log:write(result)

  -- 关闭日志文件
  log:close()
end

-- 自动切换fcitx5输入法
function auto_switch_fcitx5(mode)
  if mode == "in" then -- 进入插入模式
    local file, err = io.open("/tmp/nvim-im-state", "r")
    if err == nil then -- err == nil 说明文件存在
      local state = file:read() -- 读取状态值
      if state == "2" then -- 2说明退出前是active的，应该被重置
        os.execute("fcitx5-remote -o")
      end
      file:close()
    end
  else
    -- 退出插入模式时将将当前状态记录下来，并切回不活跃
    os.execute("fcitx5-remote > /tmp/nvim-im-state")
    os.execute("fcitx5-remote -c")
  end
end

-- 自动切换微软拼音输入法
function auto_switch_micro_pinyin(mode)
  if mode == "in" then -- 进入插入模式
    local file, err = io.open(os.getenv("TMP") .. "\\nvim-im-state", "r")
    if err == nil then -- err == nil 说明文件存在
      local state = file:read() -- 读取状态值
      if state == "zh" then -- zh说明退出前是中文的，应该被重置
        os.execute("im-switch-for-windows-main/im-switch-x64.exe zh > " .. os.getenv("TMP") .. "\\null")
      end
      file:close()
    end
  else
    -- 退出插入模式时将将当前状态记录下来，并切回英文
    os.execute("im-switch-for-windows-main/im-switch-x64.exe en > " .. os.getenv("TMP") .. "\\nvim-im-state")
  end
end

-- wsl版本，使用cmd.exe会对性能有一定的影响
-- cmd.exe参考：https://www.cnblogs.com/baby123/p/11459316.html
function auto_switch_micro_pinyin_wsl(mode)
  if mode == "in" then -- 进入插入模式
    local file, err = io.open(os.getenv("TMP") .. "\\nvim-im-state", "r")
    if err == nil then -- err == nil 说明文件存在
      local state = file:read() -- 读取状态值
      if state == "zh" then -- zh说明退出前是中文的，应该被重置
        os.execute('pwsh.exe /C "im-switch-for-windows-main/im-switch-x64.exe zh > ' .. os.getenv("TMP") .. '\\null"')
      end
      file:close()
    end
  else
    -- 退出插入模式时将将当前状态记录下来，并切回英文
    os.execute(
      'pwsh.exe /C "im-switch-for-windows-main/im-switch-x64.exe en > ' .. os.getenv("TMP") .. '\\nvim-im-state"'
    )
  end
end

-- 自动切换输入法
function _G.auto_switch_im(mode)
  local os = os.getenv("OS")
  if os ~= nil then
    if string.find(string.lower(os), "win") ~= nil then
      return auto_switch_micro_pinyin(mode)
    end
  else
    if os.getenv("WSL_DISTRO_NAME") ~= nil then
      return auto_switch_micro_pinyin_wsl(mode)
    else
      return auto_switch_fcitx5(mode)
    end
  end
end
-- 在相应的时机自动进行函数调用
-- vim自动命令参考：http://yyq123.github.io/learn-vim/learn-vi-49-01-autocmd.html
vim.api.nvim_create_autocmd({ "InsertLeave" }, { pattern = "*", command = ":call v:lua.auto_switch_im('out')" })
vim.api.nvim_create_autocmd({ "InsertEnter" }, { pattern = "*", command = ":call v:lua.auto_switch_im('in')" })
return {}
-- vim.api.nvim_create_autocmd(
--   { "BufCreate" },
--   { pattern = "*", command = ":call v:lua.auto_switch_im('out')"}
-- )
-- vim.api.nvim_create_autocmd(
--   { "BufEnter" },
--   { pattern = "*", command = ":call v:lua.auto_switch_im('out')"}
-- )
-- vim.api.nvim_create_autocmd(
--   { "BufLeave" },
--   { pattern = "*", command = ":call v:lua.auto_switch_im('out')"}
-- )
